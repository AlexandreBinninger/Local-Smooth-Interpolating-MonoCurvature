// Mathematics of computation
// volume 44. number 170
// april 1985. pages 459-461
// By Mark A. Heald
// Rational Approximations for the Fresnel Integrals

real
f_approx( real x ) {
  return (1+0.882*x)/(2+1.722*x+3.017*x^2);
}

real
g_approx( real x ) {
  return 1/(2 + 4.167*x + 3.274*x^2 + 6.890*x^3);
}

real
C_approx( real x ) {
  real arg = pi/2*x^2;
  return 0.5+f_approx(x)*sin(arg)-g_approx(x)*cos(arg);
}

real
S_approx( real x ) {
  real arg = pi/2*x^2;
  return 0.5-f_approx(x)*cos(arg)-g_approx(x)*sin(arg);
}

pair
CS_approx( real x ) {
  real arg = pi/2*x^2;
  real cc  = cos(arg);
  real ss  = sin(arg);
  real f   = f_approx(x);
  real g   = g_approx(x);
  return (0.5+f*ss-g*cc,0.5-f*cc-g*ss);
}

/*\
 |   _____                         _  ____ ____
 |  |  ___| __ ___  ___ _ __   ___| |/ ___/ ___|
 |  | |_ | '__/ _ \/ __| '_ \ / _ \ | |   \___ \
 |  |  _|| | |  __/\__ \ | | |  __/ | |___ ___) |
 |  |_|  |_|  \___||___/_| |_|\___|_|\____|____/
\*/

real [] fn = { 0.49999988085884732562,
               1.3511177791210715095,
               1.3175407836168659241,
               1.1861149300293854992,
               0.7709627298888346769,
               0.4173874338787963957,
               0.19044202705272903923,
               0.06655998896627697537,
               0.022789258616785717418,
               0.0040116689358507943804,
               0.0012192036851249883877 };

real [] fd = { 1.0,
               2.7022305772400260215,
               4.2059268151438492767,
               4.5221882840107715516,
               3.7240352281630359588,
               2.4589286254678152943,
               1.3125491629443702962,
               0.5997685720120932908,
               0.20907680750378849485,
               0.07159621634657901433,
               0.012602969513793714191,
               0.0038302423512931250065 };

real [] gn = { 0.50000014392706344801,
               0.032346434925349128728,
               0.17619325157863254363,
               0.038606273170706486252,
               0.023693692309257725361,
               0.007092018516845033662,
               0.0012492123212412087428,
               0.00044023040894778468486,
              -8.80266827476172521e-6,
              -1.4033554916580018648e-8,
               2.3509221782155474353e-10 };

real [] gd = { 1.0,
               2.0646987497019598937,
               2.9109311766948031235,
               2.6561936751333032911,
               2.0195563983177268073,
               1.1167891129189363902,
               0.57267874755973172715,
               0.19408481169593070798,
               0.07634808341431248904,
               0.011573247407207865977,
               0.0044099273693067311209,
              -0.00009070958410429993314 };

real m_pi        = 3.14159265358979323846264338328; // pi
real m_pi_2      = 1.57079632679489661923132169164; // pi/2
real m_2pi       = 6.28318530717958647692528676656; // 2*pi
real m_1_pi      = 0.318309886183790671537767526745; // 1/pi
real m_1_sqrt_pi = 0.564189583547756286948079451561; // 1/sqrt(pi)

pair
FresnelCS( real y ) {
  /*=======================================================*\
    Purpose: This program computes the Fresnel integrals 
             C(x) and S(x) using subroutine FCS
    Input :  x --- Argument of C(x) and S(x)
    Output:  C --- C(x)
             S --- S(x)
    Example:
            x          C(x)          S(x)
           -----------------------------------
           0.0      .00000000      .00000000
           0.5      .49234423      .06473243
           1.0      .77989340      .43825915
           1.5      .44526118      .69750496
           2.0      .48825341      .34341568
           2.5      .45741301      .61918176
  
    Purpose: Compute Fresnel integrals C(x) and S(x)
    Input :  x --- Argument of C(x) and S(x)
    Output:  C --- C(x)
             S --- S(x)
  \*=======================================================*/
  
  real eps = 1e-15;    
  real x   = y > 0 ? y : -y;
  real C, S;

  if ( x < 1.0 ) {

    real s = m_pi_2*(x*x);
    real t = -s*s;
  
    // Cosine integral series
    real twofn   =  0.0;
    real fact    =  1.0;
    real denterm =  1.0;
    real numterm =  1.0;
    real sum     =  1.0;
    real term;
    do {
      twofn   += 2.0;
      fact    *= twofn*(twofn-1.0);
      denterm += 4.0;
      numterm *= t;
      term     = numterm/(fact*denterm);
      sum     += term;
    } while ( abs(term) > eps*abs(sum) );
  
    C = x*sum;
  
    // Sine integral series
    twofn   = 1.0;
    fact    = 1.0;
    denterm = 3.0;
    numterm = 1.0;
    sum     = 1.0/3.0;
    do {
      twofn   += 2.0;
      fact    *= twofn*(twofn-1.0);
      denterm += 4.0;
      numterm *= t;
      term     = numterm/(fact*denterm);
      sum     += term;
    } while ( abs(term) > eps*abs(sum) );
  
    S = m_pi_2*sum*(x*x*x);
  
  } else if ( x < 6.0 ) {
  
    // Rational approximation for f
    real sumn = 0.0;
    real sumd = fd[11];
    for ( int k=10; k >= 0; --k ) {
      sumn = fn[k] + x*sumn;
      sumd = fd[k] + x*sumd;
    }
    real f = sumn/sumd;
  
    // Rational approximation for g
    sumn = 0.0;
    sumd = gd[11];
    for ( int k=10; k >= 0; --k ) {
      sumn = gn[k] + x*sumn;
      sumd = gd[k] + x*sumd;
    }
    real g = sumn/sumd;
  
    real U    = m_pi_2*(x*x);
    real SinU = sin(U);
    real CosU = cos(U);
    C = 0.5 + f*SinU - g*CosU;
    S = 0.5 - f*CosU - g*SinU;
  
  } else {
  
    real absterm;
  
    // x >= 6; asymptotic expansions for  f  and  g
  
    real s = m_pi*x*x;
    real t = -1/(s*s);
  
    // Expansion for f
    real numterm = -1.0;
    real term    =  1.0;
    real sum     =  1.0;
    real oldterm =  1.0;
    real eps10   =  0.1 * eps;
  
    do {
      numterm += 4.0;
      term    *= numterm*(numterm-2.0)*t;
      sum     += term;
      absterm  = abs(term);
      if ( oldterm < absterm ) {
        write("In FresnelCS f not converged");
        return (0,0);
      }
      oldterm  = absterm;
    } while ( absterm > eps10*abs(sum) );
  
    real f = sum / (m_pi*x);
  
    //  Expansion for  g
    numterm = -1.0;
    term    =  1.0;
    sum     =  1.0;
    oldterm =  1.0;
  
    do {
      numterm += 4.0;
      term    *= numterm*(numterm+2.0)*t;
      sum     += term;
      absterm  = abs(term);
      if ( oldterm < absterm ) {
        write("In FresnelCS g not converged");
        return (0,0);
      }
      oldterm  = absterm;
    } while ( absterm > eps10 * abs(sum) );
  
    real g = m_pi*x; g = sum/(g*g*x);
  
    real U    = m_pi_2*(x*x);
    real SinU = sin(U);
    real CosU = cos(U);
    C = 0.5 + f*SinU - g*CosU;
    S = 0.5 - f*CosU - g*SinU;
    
  }
  if ( y < 0 ) { C = -C; S = -S; }
  return (C,S);
}

pair []
vFresnelCS( int nk, real t ) {
  pair CS0 = FresnelCS(t);
  if ( nk > 1 ) {
    real tt = m_pi_2*(t*t);
    real ss = sin(tt);
    real cc = cos(tt);
    pair CS1 = ( ss*m_1_pi, (1-cc)*m_1_pi );
    if ( nk > 2 ) {
      pair CS2 = ( (t*ss-CS0.y)*m_1_pi, (CS0.x-t*cc)*m_1_pi );
      pair [] res = {CS0,CS1,CS2};
      return res;
    }
    pair [] res = {CS0,CS1};   
    return res;
  }
  pair [] res = {CS0};   
  return res;
}

/*\
 |                  ___  ____   __    _
 |   _____   ____ _| \ \/ /\ \ / /_ _| |    __ _ _ __ __ _  ___
 |  / _ \ \ / / _` | |\  /  \ V / _` | |   / _` | '__/ _` |/ _ \
 | |  __/\ V / (_| | |/  \   | | (_| | |__| (_| | | | (_| |  __/
 |  \___| \_/ \__,_|_/_/\_\  |_|\__,_|_____\__,_|_|  \__, |\___|
 |                                                   |___/
\*/

pair
evalXYaLarge( real a, real b ) {
  real s    = a > 0 ? +1 : -1;
  real absa = abs(a);
  real z    = m_1_sqrt_pi*sqrt(absa);
  real ell  = s*b*m_1_sqrt_pi/sqrt(absa);
  real g    = -0.5*s*(b*b)/absa;
  real cg   = cos(g)/z;
  real sg   = sin(g)/z;

  pair CSl = FresnelCS( ell );
  pair CSz = FresnelCS( ell+z );

  pair dCS0 = CSz - CSl;

  return ( cg * dCS0.x - s * sg * dCS0.y,
           sg * dCS0.x + s * cg * dCS0.y );
}

pair []
evalXYaLarge( int nk, real a, real b ) {

  if ( nk >= 4 || nk <= 0 ) {
    write("In evalXYaLarge first argument nk must be in 1..3, nk ", nk );
    pair [] tmp = {};
    return tmp;
  }

  real s    = a > 0 ? +1 : -1;
  real absa = abs(a);
  real z    = m_1_sqrt_pi*sqrt(absa);
  real ell  = s*b*m_1_sqrt_pi/sqrt(absa);
  real g    = -0.5*s*(b*b)/absa;
  real cg   = cos(g)/z;
  real sg   = sin(g)/z;

  pair [] CSl = vFresnelCS( nk, ell );
  pair [] CSz = vFresnelCS( nk, ell+z );

  pair dCS0 = CSz[0] - CSl[0];
  pair [] CS;
  CS[0] = (cg * dCS0.x - s * sg * dCS0.y,
           sg * dCS0.x + s * cg * dCS0.y );
  if ( nk > 1 ) {
    cg /= z;
    sg /= z;
    pair dCS1 = CSz[1] - CSl[1];
    pair DCS  = dCS1-ell*dCS0;
    CS[1] = ( cg * DCS.x - s * sg * DCS.y, sg * DCS.x + s * cg * DCS.y );
    if ( nk > 2 ) {
      pair dCS2 = CSz[2] - CSl[2];
      pair DCS  = dCS2+ell*(ell*dCS0-2*dCS1);
      cg   /= z;
      sg   /= z;
      CS[2] = ( cg * DCS.x - s * sg * DCS.y, sg * DCS.x + s * cg * DCS.y );
    }
  }
  return CS;
}

/*\
 |   _                                   _ ____          _                    _
 |  | |    ___  _ __ ___  _ __ ___   ___| |  _ \ ___  __| |_   _  ___ ___  __| |
 |  | |   / _ \| '_ ` _ \| '_ ` _ \ / _ \ | |_) / _ \/ _` | | | |/ __/ _ \/ _` |
 |  | |__| (_) | | | | | | | | | | |  __/ |  _ <  __/ (_| | |_| | (_|  __/ (_| |
 |  |_____\___/|_| |_| |_|_| |_| |_|\___|_|_| \_\___|\__,_|\__,_|\___\___|\__,_|
\*/

real
LommelReduced( real mu, real nu, real b ) {
  real tmp = 1/((mu+nu+1)*(mu-nu+1));
  real res = tmp;
  for ( int n = 1; n <= 100; ++n ) {
    tmp *= (-b/(2*n+mu-nu+1)) * (b/(2*n+mu+nu+1));
    res += tmp;
    if ( abs(tmp) < abs(res) * 1e-50 ) break;
  }
  return res;
}

/*\
 |                   ___  ____   __
 |    _____   ____ _| \ \/ /\ \ / /_ _ _______ _ __ ___
 |   / _ \ \ / / _` | |\  /  \ V / _` |_  / _ \ '__/ _ \
 |  |  __/\ V / (_| | |/  \   | | (_| |/ /  __/ | | (_) |
 |   \___| \_/ \__,_|_/_/\_\  |_|\__,_/___\___|_|  \___/
\*/

pair []
evalXYazero( int nk, real b ) {
  pair [] CS;

  real sb = sin(b);
  real cb = cos(b);
  real b2 = b*b;
  if ( abs(b) < 1e-3 ) {
    CS[0] = ( 1-(b2/6)*(1-(b2/20)*(1-(b2/42))),
              (b/2)*(1-(b2/12)*(1-(b2/30))) );
  } else {
    CS[0] = ( sb/b, (1-cb)/b );
  }
  // use recurrence in the stable part
  int m = floor(2*b);
  if ( m >= nk ) m = nk-1;
  if ( m < 1   ) m = 1;
  for ( int k = 1; k < m; ++k ) {
    CS[k] = ( (sb-k*CS[k-1].y)/b, (k*CS[k-1].x-cb)/b );
  }
  //  use Lommel for the unstable part
  if ( m < nk ) {
    real A   = b*sb;
    real D   = sb-b*cb;
    real B   = b*D;
    real C   = -b2*sb;
    real rLa = LommelReduced(m+0.5,1.5,b);
    real rLd = LommelReduced(m+0.5,0.5,b);
    for ( int k = m; k < nk; ++k ) {
      real rLb = LommelReduced(k+1.5,0.5,b);
      real rLc = LommelReduced(k+1.5,1.5,b);
      CS[k] = ( ( k*A*rLa + B*rLb + cb ) / (1+k),( C*rLc + sb ) / (2+k) + D*rLd );
      rLa  = rLc;
	    rLd  = rLb;
    }
  }
  return CS;
}

/*\
 |                   ___  ____   __    ____                  _ _
 |    _____   ____ _| \ \/ /\ \ / /_ _/ ___| _ __ ___   __ _| | |
 |   / _ \ \ / / _` | |\  /  \ V / _` \___ \| '_ ` _ \ / _` | | |
 |  |  __/\ V / (_| | |/  \   | | (_| |___) | | | | | | (_| | | |
 |   \___| \_/ \__,_|_/_/\_\  |_|\__,_|____/|_| |_| |_|\__,_|_|_|
\*/

pair
evalXYaSmall( real a, real b, int p ) {
  if ( p >= 11 || p <= 0 ) {
    write("In evalXYaSmall p must be in 1..10, p =", p );
    return (0,0);
  }

  int nkk = 4*p + 3; // max 43
  pair [] CS0 = evalXYazero( nkk, b );

  real X = CS0[0].x-(a/2)*CS0[2].y;
  real Y = CS0[0].y+(a/2)*CS0[2].x;

  real t  = 1;
  real aa = -a*a/4; // controllare!
  for ( int n=1; n <= p; ++n ) {
    t *= aa/(2*n*(2*n-1));
    real bf = a/(4*n+2);
    int jj = 4*n;
    X += t*(CS0[jj].x-bf*CS0[jj+2].y);
    Y += t*(CS0[jj].y+bf*CS0[jj+2].x);
  }
  return (X,Y);
}

pair []
evalXYaSmall( int nk, real a, real b, int p ) {

  int nkk = nk + 4*p + 2; // max 45

  pair [] CS;
  if ( nkk >= 46 ) {
    write ("In evalXYaSmall nk + 4*p + 2 must be less than 46\n" );
    return CS;
  }

  pair [] CS0 = evalXYazero( nkk, b );

  real [] X;
  real [] Y;
  for ( int j=0; j < nk; ++j ) {
    X[j] = CS0[j].x-(a/2)*CS0[j+2].y;
    Y[j] = CS0[j].y+(a/2)*CS0[j+2].x;
  }

  real t  = 1;
  real aa = -a*a/4; // controllare!
  for ( int n=1; n <= p; ++n ) {
    t *= aa/(2*n*(2*n-1));
    real bf = a/(4*n+2);
    for ( int j = 0; j < nk; ++j ) {
      int jj = 4*n+j;
      X[j] += t*(CS0[jj].x-bf*CS0[jj+2].y);
      Y[j] += t*(CS0[jj].y+bf*CS0[jj+2].x);
    }
  }
  for ( int j = 0; j < nk; ++j ) CS[j] = (X[j],Y[j]);
  return CS;
}

real A_THRESOLD   = 0.01;
int  A_SERIE_SIZE = 3;

/*\
 |    ___                       _ _           _ ___                    _  ___ ___
 |   / __|___ _ _  ___ _ _ __ _| (_)______ __| | __| _ ___ ____ _  ___| |/ __/ __|
 |  | (_ / -_) ' \/ -_) '_/ _` | | |_ / -_) _` | _| '_/ -_|_-< ' \/ -_) | (__\__ \
 |   \___\___|_||_\___|_| \__,_|_|_/__\___\__,_|_||_| \___/__/_||_\___|_|\___|___/
\*/

pair
GeneralizedFresnelCS( real a, real b, real c ) {
  pair CS;
  if ( abs(a) < A_THRESOLD ) CS = evalXYaSmall( a, b, A_SERIE_SIZE );
  else                       CS = evalXYaLarge( a, b );

  real cosc = cos(c);
  real sinc = sin(c);

  return ( CS.x * cosc - CS.y * sinc, CS.x * sinc + CS.y * cosc );
}


pair []
GeneralizedFresnelCS( int nk, real a, real b, real c ) {
  pair [] CS;
  if ( nk <= 0 || nk > 3 ) {
    write ("GeneralizedFresnelCS, nk must be in 1..3, nk = ", nk );
    return CS;
  }

  if ( abs(a) < A_THRESOLD ) CS = evalXYaSmall( nk, a, b, A_SERIE_SIZE );
  else                       CS = evalXYaLarge( nk, a, b );

  real cosc = cos(c);
  real sinc = sin(c);

  for ( int k = 0; k < nk; ++k ) {
    real xx = CS[k].x;
    real yy = CS[k].y;
    CS[k] = ( xx * cosc - yy * sinc, xx * sinc + yy * cosc );
  }
  return CS;
}

pair []
intCS( real dk, real k, real theta0, real L ) {
  pair [] iCS = L*GeneralizedFresnelCS( 3, dk*L^2, k*L, theta0 );
  return iCS;
}

/*\
 |   _           _ _     _  ____ _       _   _           _     _
 |  | |__  _   _(_) | __| |/ ___| | ___ | |_| |__   ___ (_) __| |
 |  | '_ \| | | | | |/ _` | |   | |/ _ \| __| '_ \ / _ \| |/ _` |
 |  | |_) | |_| | | | (_| | |___| | (_) | |_| | | | (_) | | (_| |
 |  |_.__/ \__,_|_|_|\__,_|\____|_|\___/ \__|_| |_|\___/|_|\__,_|
\*/ 

triple // K, dk, L
buildClothoid( pair p0, real theta0,
               pair p1, real theta1 ) {

  real CF[] = { 2.989696028701907,  0.716228953608281,
                -0.458969738821509, -0.502821153340377,
                0.261062141752652, -0.045854475238709 };
   
  // traslazione in (0,0)
  real dx  = p1.x - p0.x;
  real dy  = p1.y - p0.y;
  real r   = hypot( dx, dy );
  real phi = atan2( dy, dx );

  real phi0 = theta0 - phi;
  real phi1 = theta1 - phi;
  
  phi0 -= m_2pi*round(phi0/m_2pi);
  phi1 -= m_2pi*round(phi1/m_2pi);

  if ( phi0 >  m_pi ) phi0 -= m_2pi;
  if ( phi0 < -m_pi ) phi0 += m_2pi;
  if ( phi1 >  m_pi ) phi1 -= m_2pi;
  if ( phi1 < -m_pi ) phi1 += m_2pi;

  real delta = phi1 - phi0;

  // punto iniziale
  real X  = phi0*m_1_pi;
  real Y  = phi1*m_1_pi;
  real xy = X*Y;
  Y *= Y; X *= X;
  real A = (phi0+phi1)*(CF[0]+xy*(CF[1]+xy*CF[2])+(CF[3]+xy*CF[4])*(X+Y)+CF[5]*(X*X+Y*Y));

  // newton
  real g=0;
  real dg;
  int niter = 0;
  do {
    pair [] CS = GeneralizedFresnelCS( 3, 2*A, delta-A, phi0 );
    g   = CS[0].y;
    dg  = CS[2].x - CS[1].x;
    A  -= g / dg;
  } while ( ++niter <= 10 && abs(g) > 1e-12 );

  if ( abs(g) >= 1e-8 ) {
    write ( "buildClothoid, Newton do not converge");
    return (0,0,0);
  }

  pair CS = GeneralizedFresnelCS( 2*A, delta-A, phi0 );
  real L = r/CS.x;

  if ( L <= 0 ) {
    write( "buildClothoid, Negative length L = ", L );
    return (0,0,0);
  }
  real k  = (delta-A)/L;
  real dk = 2*A/L/L;
  
  return (k,dk,L);
}

/*\
 |        _       _   _           _     _ ____       _       _
 |    ___| | ___ | |_| |__   ___ (_) __| |  _ \ ___ (_)_ __ | |_
 |   / __| |/ _ \| __| '_ \ / _ \| |/ _` | |_) / _ \| | '_ \| __|
 |  | (__| | (_) | |_| | | | (_) | | (_| |  __/ (_) | | | | | |_
 |   \___|_|\___/ \__|_| |_|\___/|_|\__,_|_|   \___/|_|_| |_|\__|
\*/

pair
clothoidPoint( pair p0, real theta0, real k, real dk, real L) {
   pair iCS = L*GeneralizedFresnelCS( dk*L^2, k*L, theta0 );
   pair XY = (p0.x+iCS.x,p0.y+iCS.y);
   return XY;
}

path
clothoidPoints( pair p0, real theta0, real k, real dk, real L,
                int npts = 400, real extraPerc = 0 ) {
  path XY;
  real smin = -L*extraPerc;
  real smax =  L*(1+extraPerc);
  for ( int kkk=0; kkk <= npts; ++kkk ) {
    real s = smin + (kkk*(smax-smin))/npts;
    pair iCS = s*GeneralizedFresnelCS( dk*s^2, k*s, theta0 );
    XY = XY -- (p0.x+iCS.x,p0.y+iCS.y);
  }
  return XY;
}

path
clothoid( pair p0, real theta0, pair p1, real theta1, 
          int npts       = 400,
          real extraPerc = 0 ) {

  triple pars = buildClothoid( p0, theta0, p1, theta1 );
  real k  = pars.x;
  real dk = pars.y;
  real L  = pars.z;
  return clothoidPoints( p0, theta0, k, dk, L, npts, extraPerc );
}

path
clothoidOffset( pair p0, real theta0, real k, real dk, real L, int npts, real offset){
	path XY;
	for ( int kkk=0; kkk <= npts; ++kkk ) {
      real s = (kkk*L)/npts;
	  real th = 0.5*dk*s^2+k*s+theta0+pi/2;
      pair iCS = s*GeneralizedFresnelCS( dk*s^2, k*s, theta0 );
      XY = XY -- ((p0.x+iCS.x,p0.y+iCS.y)+offset*(cos(th),sin(th)));
    }
    return XY;
}
